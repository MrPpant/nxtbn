# Generated by Django 4.2.11 on 2024-05-24 18:39

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import nxtbn.core.mixin
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('street_address', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', models.CharField(max_length=100)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('email_address', models.EmailField(blank=True, max_length=254, null=True)),
                ('is_default_delivery_address', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('payment_method', models.CharField(choices=[('CREDIT_CARD', 'Credit Card'), ('PAYPAL', 'PayPal'), ('BANK_TRANSFER', 'Bank Transfer'), ('CASH_ON_DELIVERY', 'Cash on Delivery')], max_length=20)),
                ('currency', models.CharField(default='USD', help_text="ISO currency code for the order. This is the base currency in which the total amount will be stored after converting from the customer's currency to the base currency. For example, 'USD' for US Dollars. The base currency is defined in the settings.", max_length=3)),
                ('total_price', models.IntegerField(blank=True, help_text="Total amount of the order in cents, converted from the original currency (customer's currency) to the base currency. For example, if the base currency is USD and the customer_currency is different (e.g., AUD), the total amount will be converted to USD. This converted amount is stored in cents.", null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('customer_currency', models.CharField(help_text="ISO currency code of the original amount paid by the customer. For example, 'AUD' for Australian Dollars.", max_length=3)),
                ('total_price_in_customer_currency', models.IntegerField(blank=True, help_text="Original amount paid by the customer in the customer's currency, stored in cents. For example, if the customer paid AUD 1.00, it would be stored as 100 cents.", null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('SHIPPED', 'Shipped'), ('DELIVERED', 'Delivered'), ('CANCELLED', 'Cancelled'), ('RETURNED', 'Returned')], default='PENDING', help_text='Represents the current stage of the order within its lifecycle.', max_length=20, verbose_name='Order Status')),
                ('authorize_status', models.CharField(choices=[('NONE', 'No funds are authorized'), ('PARTIAL', "Partially authorized; funds don't fully cover the order's total"), ('FULL', "Fully authorized; funds cover the order's total")], default='NONE', help_text='Represents the authorization status of the order based on fund coverage.', max_length=32, verbose_name='Authorization Status')),
                ('charge_status', models.CharField(choices=[('NONE', 'No funds are charged'), ('PARTIAL', "Partially charged; funds don't fully cover the order's total"), ('FULL', "Fully charged; funds cover the order's total"), ('OVERCHARGED', "Overcharged; funds exceed the order's total")], default='NONE', help_text='Represents the charge status of the order based on transaction charges.', max_length=32, verbose_name='Charge Status')),
            ],
            options={
                'abstract': False,
            },
            bases=(nxtbn.core.mixin.CurrencyValidatorMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OrderLineItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('price_per_unit', models.DecimalField(decimal_places=3, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('total_price', models.DecimalField(decimal_places=3, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line_items', to='order.order')),
            ],
        ),
    ]
